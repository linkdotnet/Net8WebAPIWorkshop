@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject IDialogService DialogService
@implements IAsyncDisposable

<PageTitle>Expense</PageTitle>

<MudText Typo="Typo.h2" Class="mb-5">Expense Overview</MudText>

<MudTable T="Expense" Loading="@(_expenses is null)" Items="_expenses" Hover="true" CanCancelEdit="true" OnCommitEditClick="RowEditCommit"
          @bind-SelectedItem="_selectedExpense">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Value</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Categories</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Value">@context.Value <MudIcon Icon="@Icons.TwoTone.CurrencyFranc" Size="Size.Small"/></MudTd>
        <MudTd DataLabel="Date">@context.ExpenseDate</MudTd>
        <MudTd>
            <MudChipSet>
                @foreach(var category in context.Categories)
                {
                    <MudChip Color="Color.Primary">@category</MudChip>
                }
            </MudChipSet>
        </MudTd>
        <MudTd>
            <MudButton StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteEntry(context.Id))">
                Delete
            </MudButton>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd>
            <MudTextField @bind-Value="@context.Name" Label="Name"></MudTextField>
        </MudTd>
        <MudTd>
            <MudNumericField @bind-Value="@context.Value" Min="0" Label="Value" AdornmentIcon="@Icons.TwoTone.CurrencyFranc" Adornment="Adornment.End"></MudNumericField>
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value="@context.ExpenseDate" Label="Date" InputType="InputType.Date" Converter="DateConverter"></MudTextField>
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value="@context.Categories" Label="Categories" Converter="CategoryConverter"></MudTextField>
        </MudTd>
        <MudTd>
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<div style="height: 40px"></div>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddEntry">
    Add Entry
</MudButton>

@code {
    [Inject] private IExpenseApi ExpenseApi { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    private Expense? _selectedExpense;
    
    private HubConnection? _hubConnection;

    private IReadOnlyCollection<Expense>? _expenses;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7011/expensehub")
            .ConfigureLogging(c => c.SetMinimumLevel(LogLevel.Debug))
            .Build();
        
        _hubConnection.On("update", async () =>
        {
            Console.WriteLine("Hey, I got a message");
            Snackbar.Add("Data updated", Severity.Success);
            await RefreshData();
        }); 
        
        _expenses = await ExpenseApi.GetAll(1, 100);
        await _hubConnection.StartAsync();
    }

    private async Task RefreshData()
    {
        _expenses = await ExpenseApi.GetAll(1, 100);
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task AddEntry()
    {
        var entry = await DialogService.ShowAsync<AddDialog>("Add Expense");
        var result = await entry.Result;
        if (result.Canceled)
        {
            return;
        }
        var expenseDto = (Expense)result.Data;
        await ExpenseApi.Create(expenseDto);
        _expenses = await ExpenseApi.GetAll(1, 100);
    }

    private async Task DeleteEntry(int contextId)
    {
        await ExpenseApi.Delete(contextId);
        _expenses = await ExpenseApi.GetAll(1, 100);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
    
    private static readonly Converter<string[]> CategoryConverter = new()
    {
        SetFunc = value => string.Join(',', value ?? []),
        GetFunc = text => text?.Split(',') ?? [],
    };
    
    private static readonly Converter<DateOnly> DateConverter = new()
    {
        SetFunc = value => value.ToString(),
        GetFunc = text => DateOnly.Parse(text ?? ""),
    };

    private async Task RowEditCommit()
    {
        if (_selectedExpense is not { } expense)
        {
            return;
        }
        
        await ExpenseApi.Update(expense.Id, expense);
    }

}